
<%= stylesheet_link_tag "perfect-scrollbar.css" %>
<%= javascript_include_tag  "endless_page.js", "perfect-scrollbar.js" %>

    <script type="text/javascript">
      $(document).ready(function ($) {
        $('.description').perfectScrollbar();
      });
    </script>

<style type="text/css">

#map {
 float: left;
 margin: 0 25px 10px 14px;
 width: 100%;
 height: 70%;
 border: 1px solid gray;
}

#desc {
 float: left;
 width:13em;
 white-space:nowrap;
 margin-top: -37px;
}
.head {height: auto; width: 310px; text-align: right;}
.box1 { border: 1px solid #000000; height: 62px; margin: 8px auto; width: 382px;}
.normal { background-color:#FFF; }
.focus { background-color:#FFC; }
.left{ width:488px; margin:auto; float:left; }
.right{ width:450px; height:600px; margin:auto; float:left; }

.sprite { display:inline-block;
 height: 32px;
 width: 32px;
 background: url('http://sites.google.com/site/mxamples/icons-dot.png') no-repeat;
}

 .description {
        
        height:310px;
        width: 455px;
        overflow: hidden;
        position: absolute;
      }

</style>

 <script src="http://maps.google.com/maps/api/js?sensor=false"></script>
 <script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclustererplus/src/markerclusterer.js"></script>




<script type="text/javascript">
//<![CDATA[

var map, actual, iw;
var gmarkers = [];
var mcOptions = {gridSize: 20, maxZoom: 17};
var mc = new MarkerClusterer(map, [], mcOptions);
var icons = {
    img: "http://sites.google.com/site/mxamples/icons-dot.png",
    bar: [0, 0],
    cafe: [128, 32],
    hotel: [32, 32],
    disco: [96, 0],
    white: [192, 0]
};

    // Create an array of styles.
    var styles = [
      {
        stylers: [
          { hue: "#00b4ff" },
          { saturation: 50 }
        ]
      },{
        featureType: "road",
        elementType: "geometry",
        stylers: [
          { hue: "#28A0E5" },
          { visibility: "simplified" }
        ]
      },{
        featureType: "road",
        elementType: "labels",
        stylers: [
          { visibility: "off" }
        ]
      }
    ];

    // Create a new StyledMapType object, passing it the array of styles,
    // as well as the name to be displayed on the map type control.
    var styledMap = new google.maps.StyledMapType(styles, {name: "Styled Map"});


function shifter(a) {

    var g = google.maps;
    var b = {
        url: icons.img,
        size: new g.Size(32, 32),
        origin: new g.Point(a[0], a[1]),
        anchor: new g.Point(15, 32)
    };
    return b
}

function createMarker(b, c, d, e, f) {
    var g = google.maps;
    // var bounds = new g.LatLngBounds();

    var h = shifter(icons[e]);
    var i = new g.Marker({
        position: b,
        map: map,
        title: c,
        clickable: true,
        draggable: false,
        icon: h
    });

    // bounds.extend(i.position);

   

    i.category = e;
    i.name = c;
    i.id = f;
    gmarkers.push(i);

     ///get array of markers currently in cluster
    var allMarkers = mc.getMarkers();
    var text = "<p><b>" + c + "<\/b><\/p>";

    //check to see if any of the existing markers match the latlng of the new marker
      if (allMarkers.length != 0) {
        for (j=0; j < allMarkers.length; j++) {
            
          var existingMarker = allMarkers[j];
          var pos = existingMarker.getPosition();

          if (b.equals(pos)) {
            text = text + "<p><b>" + c + "<\/b><\/p>";
          }                 
        }
      }

    
    g.event.addListener(i, "click", function() {
        iw.setContent(text);
        iw.open(map,this);
    });
    g.event.addListener(i, "mouseover", function() {
        i.setIcon(shifter(icons.white));
        var a = document.getElementById(f);
        if (a) {
            a.className = "focus";
            actual = a
        }
    });
    g.event.addListener(i, "mouseout", function() {
        i.setIcon(shifter(icons[e]));
        if (actual) {
            actual.className = "normal"
        }
    })

    mc.addMarker(i);
    

}

var hover = {
    over: function(i) {
      
        var a = gmarkers[i];
        var b = document.getElementById(a.id);
        b.className = "focus";
        a.setIcon(shifter(icons.white))
    },
    out: function(i) {
        var a = gmarkers[i];
        var b = document.getElementById(a.id);
        b.className = "normal";
        a.setIcon(shifter(icons[a.category]))
    }
};
var visible = {
    show: function(a) {
        for (var i = 0, m; m = gmarkers[i]; i++) {
            if (m.category == a) {
                m.setVisible(true)
            }
        }

        //document.getElementById(a).checked = true
    },
    hide: function(a) {
        for (var i = 0, m; m = gmarkers[i]; i++) {
            if (m.category == a) {
                m.setVisible(false)
            }
        }
        //document.getElementById(a).checked = false;
        iw.close()
    }
};

function boxclick(a, b) {
    if (a.checked) {
        visible.show(b)
    } else {
        visible.hide(b)
    }
    //makeSidebar()
}

function triggerClick(i) {
    google.maps.event.trigger(gmarkers[i], "click")
}

// function makeSidebar() {
//     var a;
//     var b = "";
//     for (var i = 0, m; m = gmarkers[i]; i++) {
//         if (m.getVisible()) {
//             var c = gmarkers[i].category;
//             c = c.replace(/^./, c.charAt(0).toUpperCase());
//             if (a != c) b += "<b>" + c + "s<\/b><br \/>";
//             b += '<a id="' + gmarkers[i].id + '" href="javascript:triggerClick(' + gmarkers[i].id + ')" onmouseover="hover.over(' + i + ')" onmouseout="hover.out(' + i + ')">' + gmarkers[i].name + '<\/a><br \/>';
//             a = c
//         }
//     }
//     document.getElementById("sidebar").innerHTML = b
// }

function loadMap() {
    var g = google.maps;
    
    var a = {
        center: new g.LatLng(21.1500, 79.0900),
        zoom: 5,
        mapTypeId: g.MapTypeId.ROADMAP,
        mapTypeControlOptions: {
            mapTypeIds: [g.MapTypeId.ROADMAP, g.MapTypeId.SATELLITE, g.MapTypeId.HYBRID, 'map_style']
        },
        panControl: true,
        zoomControl: true
    };

    

    map = new g.Map(document.getElementById("map"), a);

    map.mapTypes.set('map_style', styledMap);
    map.setMapTypeId('map_style');


    iw = new g.InfoWindow();
    
    
    g.event.addListener(map, "click", function() {
        if (iw) iw.close()
    });
    readData()
}

function readData() {
    var k;
    try {
        if (typeof ActiveXObject != "undefined") {
            k = new ActiveXObject("Microsoft.XMLHTTP")
        } else if (window["XMLHttpRequest"]) {
            k = new XMLHttpRequest()
        }
    } catch (e) {}
    <% if params[:search] %>
    k.open("GET", "/posts/overview.xml?utf8=✓&search[price]=<%= params[:search][:price] %>&search[area]=<%= params[:search][:area] %>&search[miles]=<%= params[:search][:miles] %>&search[address]=<%= params[:search][:address] %>&commit=Search", true);
    <% else %>
    k.open("GET", "/posts/overview.xml", true);
    <% end %>
    k.onreadystatechange = function() {
        if (k.readyState == 4) {
            var a = k.responseXML;
            var b = a.documentElement.getElementsByTagName("marker");

            
            mc = new MarkerClusterer(map, [], mcOptions);

            for (var i = 0, m; m = b[i]; i++) {
                var c = parseFloat(m.getAttribute("lat"));
                var d = parseFloat(m.getAttribute("lng"));
                var e = new google.maps.LatLng(c, d);
                var f = m.getAttribute("address");
                var g = m.getAttribute("nr");
                var h = m.getAttribute("name");
                var j = m.getAttribute("category");
                createMarker(e, h, f, j, g)
            }
            if (gmarkers) {
                gmarkers.sort(compareCats)
            }
            visible.show("bar");
            visible.show("cafe");
            visible.hide("hotel");
            visible.hide("disco");
            //makeSidebar()

          function AutoCenter() {
              //  Create a new viewpoint bound
              var bounds = new google.maps.LatLngBounds();
              //  Go through each...
              $.each(gmarkers, function (index, marker) {
                bounds.extend(marker.position);

              });
              //  Fit these bounds to the map
              map.fitBounds(bounds);
            }

          

            AutoCenter();


        }
    };
    k.send(null)
}
var compareCats = function(a, b) {
    var c = a.name;
    c = c.toLowerCase();
    c = c.replace(/ä/g, "a");
    c = c.replace(/ö/g, "o");
    c = c.replace(/ü/g, "u");
    c = c.replace(/ß/g, "s");
    var d = b.name;
    d = d.toLowerCase();
    d = d.replace(/ä/g, "a");
    d = d.replace(/ö/g, "o");
    d = d.replace(/ü/g, "u");
    d = d.replace(/ß/g, "s");
    var e = a.category;
    var f = b.category;
    if (a.category == b.category) {
        if (a.name == b.name) {
            return 0
        }
        return (a.name < b.name) ? -1 : 1
    }
    return (a.category < b.category) ? -1 : 1
};
window.onload = loadMap;

//]]>
</script>

</head>

<body>
  


    <div class="left"><div id="map"></div></div>

    <div class="right">

            <div class="head">
                <%= form_for :search, :url=>{:controller=>'posts', :action=>'overview'},:html => {:method => "get"} do |f| %>
                  <div class="field">
                    Price
                  &nbsp; &nbsp; &nbsp;&nbsp;<%= f.text_field :price, :value=> "#{params[:search][:price] if params[:search]}" %>
                
                  </div>
                  <div class="field">
                    Area
                   &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;<%= f.text_field :area, :value=> "#{params[:search][:area] if params[:search] }" %>
                  </div>
                  <div class="field">
                    Miles
                    <%= f.text_field :miles, :value=> "#{params[:search][:miles] if params[:search]}" %>
                  </div>
                  <div class="field">
                    Address
                    &nbsp;<%= f.text_field :address, :value=> "#{params[:search][:address] if params[:search]}" %>
                  </div>
                   
                  <div class ="field">
                 
                  </div>

                  <div class="actions"><%= f.submit "Search" ,:class => "btn btn-secondary" %></div>
                 
              <%end%>

              Sort By: <%= sortable "price_sq_ft", "Price" %> | <%= sortable "distance" %>

            </div>

            

        <div id="all_posts" class="description">
            <%= render(:partial => 'posts/overviews') %>
            <%= will_paginate @posts %>
        </div>

    </div>


